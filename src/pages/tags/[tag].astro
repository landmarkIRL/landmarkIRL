---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHeader from "../../components/PageHeader.astro";
import ArticleLink from "../../components/ArticleLink.astro";

export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  const uniqueTags = [
    ...new Set(allPosts.flatMap((post) => post.data.tags || [])),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter(
      (post) => post.data.tags && post.data.tags.includes(tag)
    );
    return {
      params: { tag: tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;

const sortedPosts = posts.sort(
  (a, b) =>
    new Date(b.data.publishDate).getTime() -
    new Date(a.data.publishDate).getTime()
);
---

<BaseLayout title={`Tagged: ${tag}`} description={`Posts tagged with ${tag}`} color="blue">
  <PageHeader
    title={`Tagged: "${tag}"`}
    description={`Found ${posts.length} post${posts.length === 1 ? "" : "s"} tagged with "${tag}".`}
  />
  <div class="posts-container">
    {
      sortedPosts.length > 0 ? (
        sortedPosts.map(async (post) => {
          const imageProp = post.data.image
            ? {
                src: post.data.image.src.src,
                alt: post.data.image.alt,
              }
            : undefined;

          return (
            <ArticleLink
              title={post.data.title}
              date={post.data.publishDate}
              url={`/blog/${post.id}`}
              description={post.data.description}
              image={imageProp}
            />
          );
        })
      ) : (
        <p>No posts found with this tag.</p>
      )
    }
  </div>
</BaseLayout>
