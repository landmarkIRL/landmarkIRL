---
import siteInfo from "../data/site-info";
import BaseLayout from "../layouts/BaseLayout.astro";
import { getEntry, render, getCollection } from "astro:content";

const entry = await getEntry("pages", "index");
if (!entry) return Astro.redirect("/404");
const { Content } = await render(entry);

const posts = await getCollection("posts");
---

<BaseLayout title={siteInfo.name} description={siteInfo.description}>
  <div class="home">
    <div class="item is-expandable">
      <div class="item-header">
        <span class="number">00.</span>
        <span class="title">Start here</span>
      </div>
      <div class="item-content">
        <div class="content-wrapper">
          <Content />
        </div>
      </div>
    </div>

    {
      posts.map((post, index) => {
        const postNumber = String(index + 1).padStart(2, "0");
        return (
          <div class="item">
            <a href={`/blog/${post.id}`} class="item-link">
              <span class="number">{postNumber}.</span>
              <span class="title">{post.data.title}</span>
            </a>
          </div>
        );
      })
    }
  </div>
</BaseLayout>

<script>
  import type { ThemeColor } from "../data/colors";

  const homeContainer = document.querySelector(".home");
  const expandableItem = homeContainer?.querySelector(".is-expandable");
  const header = expandableItem?.querySelector(".item-header");
  const content = expandableItem?.querySelector(".item-content") as HTMLElement;

  const colors = [
    "purple",
    "pink",
    "blue",
    "yellow",
    "green",
    "brown",
  ] as const;

  function getRandomColor(): ThemeColor {
    return colors[Math.floor(Math.random() * colors.length)];
  }

  function updatePageColor(newColor: ThemeColor) {
    document.body.setAttribute("data-color", newColor);
  }

  if (homeContainer && header && content) {
    content.style.maxHeight = "0";

    header.addEventListener("click", () => {
      homeContainer.classList.toggle("is-item-expanded");
      const isExpanded = homeContainer.classList.contains("is-item-expanded");
      content.style.maxHeight = isExpanded ? `${content.scrollHeight}px` : "0";

      const newColor = getRandomColor();
      updatePageColor(newColor);
    });
  }
</script>

<style lang="scss">
  .home {
    display: flex;
    flex-direction: column;
    width: 100%;
    line-height: var(--line-height-display);
    padding-top: var(--space-4xl);
  }

  .item {
    width: 100%;
    transition: opacity 0.3s ease-in-out;
  }

  .home:hover .item:not(:hover) {
    opacity: 0.4;
  }

  .item-header,
  .item-link {
    display: grid;
    grid-template-columns: auto 1fr;
    column-gap: var(--space-m);
    align-items: baseline;
    padding-block: var(--space-3xs);
    width: 100%;
    font-size: var(--step-3);
    font-weight: 600;
    cursor: pointer;
    text-decoration: none;

    @media (max-width: 768px) {
      font-size: var(--step-2);
    }
    @media (max-width: 480px) {
      font-size: var(--step-1);
    }
  }

  .home.is-item-expanded .item:not(.is-expandable) {
    opacity: 0.4;
    pointer-events: none;
  }

  .item-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease-in-out;

    .content-wrapper {
      margin-left: calc(var(--space-xl) + 2ch);
      padding-top: var(--space-s);
      padding-bottom: var(--space-l);
      font-size: var(--step-2);
      max-width: 60ch;

      @media (max-width: 768px) {
        font-size: var(--step-1);
      }
      @media (max-width: 480px) {
        font-size: var(--step-o);
      }

      a {
        text-decoration: underline;
      }
    }
  }
</style>
